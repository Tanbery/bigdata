version: '3.8'
services:
  zookeeper:
    hostname: zookeeper
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  broker:
    container_name: kafka
    # hostname: broker
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  kafka-ui:
    hostname: kafka-ui
    image: confluentinc/cp-enterprise-control-center:7.4.0
    container_name: kafka-ui
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLIENT_METRICS_ENABLE: 'false'
      PORT: 9021
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9021/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # postgres:
  #   container_name: postgres
  #   image: postgres:latest
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     POSTGRES_DB: postgres
  #   healthcheck:
  #     test: [ "CMD", "pg_isready", "-U", "postgres" ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # elasticsearch:
  #   container_name: elastic
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.17.25
  #   environment:
  #     - node.name=elastic
  #     - cluster.name=elasticsearch-cluster
  #     - discovery.type=single-node
  #     # - xpack.security.enabled=false
  #     # - xpack.security.enrollment.enabled=false
  #     # - xpack.security.transport.ssl.enabled=false
  #   ports:
  #     - "9200:9200"
  #     - "9300:9300"

  # kibana:
  #   container_name: kibana
  #   image: docker.elastic.co/kibana/kibana:7.17.25
  #   environment:
  #     - node.name=kibana
  #     - cluster.name=elasticsearch-cluster
  #     - ELASTICSEARCH_HOSTS=http://elastic:9200
  #   depends_on:
  #     - elasticsearch
  #   ports:
  #     - "5601:5601"

  jobmanager:
    container_name: jobmanager
    image: flink:1.18.1-scala_2.12
    ports:
      - "8081:8081"
      - "6123:6123"
      #- "9999:9999"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager

  taskmanager:
    container_name: taskmanager
    image: flink:1.18.1-scala_2.12
    depends_on:
      - jobmanager
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
